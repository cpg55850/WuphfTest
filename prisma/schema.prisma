// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  WuphfUser     WuphfUser?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WuphfUser {
  user       User       @relation(fields: [email], references: [email], onDelete: Cascade)
  email      String     
  userName   String     @unique @db.VarChar(255)
  createdAt  DateTime   @default(now())
  bio        String     @db.Text
  theme      String     @db.Text @default("light")
  wuphfs     Wuphf[]
  Likes      Likes[]
  Followers  Follower[] @relation("follower")
  Following  Follower[] @relation("followee")
  Comments   Comments[]
}

model Wuphf {
  id         Int       @id @default(autoincrement())
  user       WuphfUser @relation(fields: [userId], references: [userName], onDelete: Cascade)
  userId     String
  pictureUrl String    @db.VarChar(255)
  postBody   String    @db.VarChar(255)
  createdAt  DateTime   @default(now())
  Likes      Likes[]
  Comments   Comments[]
}

model Likes {
  user    WuphfUser @relation(fields: [userId], references: [userName], onDelete: Cascade)
  userId  String
  wuphf   Wuphf     @relation(fields: [wuphfId], references: [id], onDelete: Cascade)
  wuphfId Int
  @@unique([userId, wuphfId])
}

model Comments {
  id          Int @id @default(autoincrement())
  wuphf       Wuphf @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId     Int
  user        WuphfUser? @relation(fields: [userId], references: [userName], onDelete: Cascade)
  userId      String?
  commentBody String
  @@unique([id, postsId])
}

model Follower {
  user       WuphfUser @relation("follower", fields: [userId], references: [userName], onDelete: Cascade)
  userId     String    
  follower   WuphfUser @relation("followee", fields: [followerId], references: [userName], onDelete: Cascade)
  followerId String    
  createdAt  DateTime  @default(now())
  @@unique([userId, followerId])
}