//GET: Read
//POST: Create
//PATCH: Update
//DELETE: Destroy

//Don't know if we wanted to format the response messages in a special way otherwise we can add res.json(variable) to every route.
/*
anything within the app.HTTPrequest() method is a URI.
If a parameter within the URI has a : before it that is to be filled in by the requester
req is a request and res is the response. 
This is not functioning code.
*/


const port :'3030';  //I think this is the port we're using.


// connect to the db here



//Routes
//—-----------------------------creates a wuphf---------------------------------------------------
app.post(‘:user_id/wuphf/:post_id’), (req, res) => {
	Const user_id  = req.params.user_id; 
    Const post_id  = req.params.post_id; //I dont know if this needs to be included as it would be auto incremented
	Const picture_url = req.body.picture_url;
	Const post_body = req.body.post_body;

	Error Handling here

    const wuphf = await prisma.product.create({
        data: {
            id: Number(req.params.post_id),
            user_id: Number(req.params.user_id),
            picture_url: req.body.picture_url,
            post_body = req.body.post_body,
        },
    });
}

//—-----------------------------Request Wuphf by id---------------------------------------------------
app.get(‘users/:user_id/wuphf/:id’), (req,res) => {
	
	
    const wuphf = await prisma.wuphf.findUnique({
        where: {
            user_id: Number(request.params.user_id),
            id: Number(request.params.id)
        }
    })

//—-----------------------------Request all wuphfs from a user---------------------------------------------------
app.get('users/:user_id/wuphfs'), (req,res) => {

    const wuphfs = await prisma.wuphfs.findUnique({
        where: {
            user_id: Number(request.params.user_id),
        }
    });
}
//----------------------------Request all wuphfs------------------------------
app.get('/wuphfs/), (req,res) => {
    const wuphfs = await prisma.wuphfs.findmany({});
}



//—-----------------------------------Update Wuphf---------------------------------------------

app.patch('/wuphfs/:id'), (req,res) => {
    const wuphfs = await prisma.wuphfs.update({
        where:{
            id: (nubmer)request.params.id
        }
        data:{
            post_body: request.body,
        }
    })
}


//—-----------------------------Delete Wuphf---------------------------------------------------
//Should this also delete all likes and comments?

app.delete('/wuphfs/:id), (req,res) => {
 const deleted_wuphf = await prisma.wuphf.delete({
        where: {
            id: Number(request.params.id)
        }
}

//—-----------------------------Update users---------------------------------------------------
app.patch('/users/:id), (req,res) => {
    const wuphfs = await prisma.users.update({
        where:{
            id: (nubmer)request.params.id
        }
        data:{
            username: request.body.username || undefined,  //Undefined means if not parameter is given it will move on.
            bio: request.body.bio || undefined,
            animal: request.body.animal || undefined,
        }
    })
}

//—-----------------------------delete user---------------------------------------------------
//I don't know if we want to cascade down and delete all of the likes, comments, and posts they made as well.
app.delete('/users/:id), (req,res) => {
     const deleted_wuphf = await prisma.users.delete({
        where: {
            id: Number(request.params.id)
        }
        
}
//—-----------------------------add like---------------------------------------------------
app.post(‘/likes/:id’), (req, res) => {
    Const like_id  = req.params.id; //I dont know if this needs to be included as it would be auto incremented
    Const user_id  = req.body.user_id; 
    Const post_id = req.body.post_id;

    const comment = await prisma.likes.create({
        data:
            like_id: Number(like_id),
            user_id: Number(user_id),
            post_id: Number(post_id), 
    })
}
//—-----------------------------delete like---------------------------------------------------
app.delete('/likes/:id), (req,res) => {
     const deleted_wuphf = await prisma.likes.delete({
        where: {
            id: Number(request.params.id)
        }
}
//—-----------------------------add comment---------------------------------------------------
app.post(‘/comment/:id’), (req, res) => {
    Const comment_id  = req.params.id; //I dont know if this needs to be included as it would be auto incremented
    Const user_id  = req.body.user_id; 
    Const post_id = req.body.post_id;
    Const comment_body = req.body.comment_body;

        const comment = await prisma.comment.create({
            data:
                user_id: Number(user_id),
                comment_id: Number(comment_id),
                post_id: Number(post_id),
                comment_body: comment_body;
        })
}
//—-----------------------------delete comment---------------------------------------------------

app.delete('/comments/:id), (req,res) => {
     const deleted_wuphf = await prisma.comments.delete({
        where: {
            id: Number(request.params.id)
        }
}
//-----------------------------------------------------------------------------------------------


app.listen(port); //means the server is waiting for a request.