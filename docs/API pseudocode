//GET: Read
//POST: Create
//PATCH: Update
//DELETE: Destroy

//Don't know if we wanted to format the response messages in a special way otherwise we can add res.json(variable) to every route.
/*
anything within the app.HTTPrequest() method is a URI.
If a parameter within the URI has a : before it that is to be filled in by the requester
req is a request and res is the response. 
This is not functioning code.
*/


const port = '3030';  //I think this is the port we're using.


// connect to the db here



//Routes
//—-----------------------------creates a wuphf---------------------------------------------------
app.post(':user_id/wuphf/:post_id'), (req, res) => {

	//Error Handling here

    const wuphf = await prisma.product.create({
        data: {
            id: Number(req.params.post_id),
            user_id: Number(req.params.user_id),
            picture_url: req.body.picture_url || undefined,
            post_body: req.body.post_body,
        },
    });
    res.json(wuphf);
}

//—-----------------------------Request Wuphf by id---------------------------------------------------
app.get('/wuphf/:id'), (req,res) => {
	
	
    const wuphf = await prisma.wuphf.findUnique({
        where: {
            id: Number(request.params.id),
        }
    });
    res.json(wuphf);
}

//—-----------------------------Request all wuphfs from a user---------------------------------------------------
app.get('wuphfs/:user_id/'), (req,res) => {

    const wuphfs = await prisma.wuphfs.findUnique({
        where: {
            user_id: Number(request.params.user_id),
        }
    });
    res.json(wuphfs);
}
//----------------------------Request all wuphfs------------------------------
app.get('/wuphfs/'), (req,res) => {
    const wuphfs = await prisma.wuphfs.findmany({});
    res.json(wuphfs);
}



//—-----------------------------------Update Wuphf---------------------------------------------

app.patch('/wuphfs/:id'), (req,res) => {
    const wuphfs = await prisma.wuphfs.update({
        where:{
            id: Number(request.params.id)
        },
        data:{
            post_body: request.body,
        },
    });
    res.json(wuphfs);
}


//—-----------------------------Delete Wuphf---------------------------------------------------
app.delete('/wuphfs/:id'), (req,res) => {
 const deleted_wuphf = await prisma.wuphf.delete({
        where: {
            id: Number(request.params.id),
        }
    });
    res.json(deleted_wuphf);
}

//—-----------------------------Update users---------------------------------------------------
app.patch('/users/:id'), (req,res) => {
    const user = await prisma.users.update({
        where:{
            id: Number(request.params.id)
        },
        data:{
            username: request.body.username || undefined,  //Undefined means if not parameter is given it will move on.
            bio: request.body.bio || undefined,
            animal: request.body.animal || undefined,
        }
    });
    res.json(user);
}

//—-----------------------------delete user---------------------------------------------------
app.delete('/users/:id'), (req,res) => {
     const deleted_user = await prisma.users.delete({
        where: {
            id: Number(request.params.id),
        }
    });    
    res.json(deleted_user);
}
//—-----------------------------add like---------------------------------------------------
app.post('/likes/:id'), (req, res) => {

    const like = await prisma.likes.create({
        data: {
            like_id: Number(req.params.id),
            user_id: Number(req.body.user_id),
            post_id: Number(req.body.post_id), 
        }
    });
    res.json(like);
}
//—-----------------------------delete like---------------------------------------------------
app.delete('/likes/:id'), (req,res) => {
     const deleted_like = await prisma.likes.delete({
        where: {
            id: Number(request.params.id),
        }
    });
    res.json(deleted_like);
}
//—-----------------------------add comment---------------------------------------------------
app.post('/comment/:id'), (req, res) => {
  
    const comment = await prisma.comment.create({
        data: {
            user_id: Number(req.body.user_id),
            comment_id: Number(req.params.id),
            post_id: Number(req.body.post_id),
            comment_body: req.body.comment_body,
        }
    });
    res.json(comment);
}
//—-----------------------------delete comment---------------------------------------------------

app.delete('/comments/:id'), (req,res) => {
     const deleted_comment = await prisma.comments.delete({
        where: {
            id: Number(request.params.id),
        }
    });
    res.json(deleted_comment);
}
//-----------------------------------------------------------------------------------------------


app.listen(port); //means the server is waiting for a request.